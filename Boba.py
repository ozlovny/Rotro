import sqlite3
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù_–û–¢_BOTFATHER'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
conn = sqlite3.connect('balances.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance REAL DEFAULT 0.00
)''')
conn.commit()

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –±–∞–ª–∞–Ω—Å: 0.00$")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ "777"
@dp.message_handler(lambda message: 'üé∞' in message.text)
async def slot_win(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("UPDATE users SET balance = balance + 7.77 WHERE user_id = ?", (user_id,))
    conn.commit()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    await message.answer(f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 7.77$! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f}$")

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ "—Ç–µ—Å—Ç–Ω–µ—Ç"
@dp.message_handler(commands=['deposit'])
async def deposit(message: types.Message):
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CryptoBot API
    # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    cursor.execute("UPDATE users SET balance = balance + 100.0 WHERE user_id = ?", (user_id,))
    conn.commit()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    await message.answer(f"üöÄ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100$. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f}$")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
